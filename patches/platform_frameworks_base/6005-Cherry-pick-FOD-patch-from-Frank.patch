From 5667ea0ca8a525a903f24ac21e4817d496e238af Mon Sep 17 00:00:00 2001
From: Frank <eggen@emden.net>
Date: Mon, 6 May 2019 13:36:03 +0900
Subject: [PATCH 1/1] Cherry-pick FOD patch from Frank

Signed-off-by: AndroPlus <mail@andro.plus>
---
 .../keyguard/KeyguardUpdateMonitor.java       | 13 +++
 .../KeyguardUpdateMonitorCallback.java        |  5 +
 .../systemui/statusbar/phone/StatusBar.java   |  4 +-
 .../fingerprint/AuthenticationClient.java     | 14 +++
 .../server/fingerprint/FacolaView.java        | 93 ++++++++++++++++++-
 5 files changed, 124 insertions(+), 5 deletions(-)

diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
index fd6838ab0bf..6e2cb081262 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitor.java
@@ -218,6 +218,7 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener,
     private boolean mKeyguardOccluded;
     @VisibleForTesting
     protected boolean mTelephonyCapable;
+    protected boolean mPulsing;
 
     // Device provisioning state
     private boolean mDeviceProvisioned;
@@ -1867,6 +1868,7 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener,
         callback.onClockVisibilityChanged();
         callback.onKeyguardVisibilityChangedRaw(mKeyguardIsVisible);
         callback.onTelephonyCapable(mTelephonyCapable);
+        callback.onPulsing(mPulsing);
         for (Entry<Integer, SimData> data : mSimDatas.entrySet()) {
             final SimData state = data.getValue();
             callback.onSimStateChanged(state.subId, state.slotId, state.simState);
@@ -2192,4 +2194,15 @@ public class KeyguardUpdateMonitor implements TrustManager.TrustListener,
             pw.println("    trustManaged=" + getUserTrustIsManaged(userId));
         }
     }
+
+    public boolean setPulsing(boolean pulsing) {
+        mPulsing = pulsing;
+        for (int i = 0; i < mCallbacks.size(); i++) {
+            KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();
+            if (cb != null) {
+                cb.onPulsing(mPulsing);
+            }
+        }
+        return mPulsing;
+    }
 }
diff --git a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitorCallback.java b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitorCallback.java
index 2cdd4a5886c..3e9a87d00d2 100644
--- a/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitorCallback.java
+++ b/packages/SystemUI/src/com/android/keyguard/KeyguardUpdateMonitorCallback.java
@@ -296,4 +296,9 @@ public class KeyguardUpdateMonitorCallback {
      */
     public void onLogoutEnabledChanged() { }
 
+    /**
+     * Called when a pulsing is received.
+     */
+    public void onPulsing(boolean pulsing) { }
+
 }
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
index d5286f3c845..c0564d44abe 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/StatusBar.java
@@ -5532,14 +5532,14 @@ public class StatusBar extends SystemUI implements DemoMode, TunerService.Tunabl
                         // Otherwise just show the always-on screen.
                         setPulsing(true);
                     }
-                    setOnPulseEvent(reason, true);
+                    KeyguardUpdateMonitor.getInstance(mContext).setPulsing(true);
                 }
 
                 @Override
                 public void onPulseFinished() {
                     callback.onPulseFinished();
                     setPulsing(false);
-                    setOnPulseEvent(-1, false);
+                    KeyguardUpdateMonitor.getInstance(mContext).setPulsing(false);
                 }
 
                 private void setPulsing(boolean pulsing) {
diff --git a/services/core/java/com/android/server/fingerprint/AuthenticationClient.java b/services/core/java/com/android/server/fingerprint/AuthenticationClient.java
index f36ed9b38c6..c5f40c378fe 100644
--- a/services/core/java/com/android/server/fingerprint/AuthenticationClient.java
+++ b/services/core/java/com/android/server/fingerprint/AuthenticationClient.java
@@ -17,6 +17,8 @@
 package com.android.server.fingerprint;
 
 import android.content.Context;
+import android.content.ComponentName;
+import android.content.res.Resources;
 import android.hardware.biometrics.fingerprint.V2_1.IBiometricsFingerprint;
 import android.hardware.biometrics.BiometricPrompt;
 import android.hardware.biometrics.IBiometricPromptReceiver;
@@ -26,6 +28,7 @@ import android.hardware.fingerprint.IFingerprintServiceReceiver;
 import android.os.Bundle;
 import android.os.IBinder;
 import android.os.RemoteException;
+import android.content.pm.PackageManager;
 import android.util.Slog;
 
 import com.android.internal.logging.MetricsLogger;
@@ -55,6 +58,7 @@ public abstract class AuthenticationClient extends ClientMonitor {
     protected boolean mDialogDismissed;
 
     private FacolaView mFacola;
+    private final String mKeyguardPackage;
 
     // Receives events from SystemUI and handles them before forwarding them to FingerprintDialog
     protected IBiometricPromptReceiver mDialogReceiver = new IBiometricPromptReceiver.Stub() {
@@ -99,6 +103,8 @@ public abstract class AuthenticationClient extends ClientMonitor {
         mFingerprintManager = (FingerprintManager) getContext()
                 .getSystemService(Context.FINGERPRINT_SERVICE);
         mFacola = new FacolaView(context);
+        mKeyguardPackage = ComponentName.unflattenFromString(context.getResources().getString(
+                com.android.internal.R.string.config_keyguardComponent)).getPackageName();
     }
 
     @Override
@@ -277,6 +283,14 @@ public abstract class AuthenticationClient extends ClientMonitor {
         return 0; // success
     }
 
+    /**
+     * @param clientPackage
+     * @return true if this is keyguard package
+     */
+    private boolean isKeyguard(String clientPackage) {
+        return mKeyguardPackage.equals(clientPackage);
+    }
+
     @Override
     public int stop(boolean initiatedByClient) {
         if (mAlreadyCancelled) {
diff --git a/services/core/java/com/android/server/fingerprint/FacolaView.java b/services/core/java/com/android/server/fingerprint/FacolaView.java
index 37e87fc9e37..a1817e375b6 100644
--- a/services/core/java/com/android/server/fingerprint/FacolaView.java
+++ b/services/core/java/com/android/server/fingerprint/FacolaView.java
@@ -16,10 +16,14 @@
 
 package com.android.server.fingerprint;
 
+import android.app.KeyguardManager;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
 import android.content.Context;
+import android.hardware.display.DisplayManager;
+import android.os.PowerManager;
+import android.os.ServiceManager;
 import android.view.View.OnTouchListener;
 import android.view.View;
 import android.widget.ImageView;
@@ -32,6 +36,11 @@ import android.view.Gravity;
 import android.os.Handler;
 import android.os.Looper;
 
+import com.android.keyguard.KeyguardUpdateMonitor;
+import com.android.keyguard.KeyguardUpdateMonitorCallback;
+import com.android.internal.telephony.IccCardConstants.State;
+import com.android.systemui.R;
+
 import java.io.PrintWriter;
 
 import vendor.xiaomi.hardware.fingerprintextension.V1_0.IXiaomiFingerprint;
@@ -47,6 +56,7 @@ public class FacolaView extends ImageView implements OnTouchListener {
     private final WindowManager.LayoutParams mParams = new WindowManager.LayoutParams();
 
     private final static float UNTOUCHED_DIM = .1f;
+    private final static float UNTOUCHED_DOZE_DIM = .4f;
     private final static float TOUCHED_DIM = .9f;
 
     private final Handler mMainHandler;
@@ -54,6 +64,78 @@ public class FacolaView extends ImageView implements OnTouchListener {
 
     private final WindowManager mWM;
 
+    private boolean mIsDreaming;
+    private boolean mIsPulsing;
+    private boolean mIsScreenOn;
+
+    KeyguardUpdateMonitor mUpdateMonitor;
+
+    KeyguardUpdateMonitorCallback mMonitorCallback = new KeyguardUpdateMonitorCallback() {
+        @Override
+        public void onDreamingStateChanged(boolean dreaming) {
+            super.onDreamingStateChanged(dreaming);
+            mIsDreaming = dreaming;
+            mInsideCircle = false;
+        }
+
+        @Override
+        public void onPulsing(boolean pulsing) {
+            super.onPulsing(pulsing);
+            mIsPulsing = pulsing;
+            mInsideCircle = false;
+        }
+
+        @Override
+        public void onScreenTurnedOff() {
+            super.onScreenTurnedOff();
+            mInsideCircle = false;
+        }
+
+        @Override
+        public void onStartedGoingToSleep(int why) {
+            super.onStartedGoingToSleep(why);
+            mInsideCircle = false;
+        }
+
+        @Override
+        public void onFinishedGoingToSleep(int why) {
+            super.onFinishedGoingToSleep(why);
+        }
+
+        @Override
+        public void onScreenTurnedOn() {
+           super.onScreenTurnedOn();
+           mIsScreenOn = true;
+           mInsideCircle = false;
+        }
+
+        @Override
+        public void onKeyguardVisibilityChanged(boolean showing) {
+            super.onKeyguardVisibilityChanged(showing);
+            mInsideCircle = false;
+        }
+
+        @Override
+        public void onKeyguardBouncerChanged(boolean isBouncer) {
+            if (visible && isBouncer) {
+                hide();
+            } else if (!visible) {
+                show();
+            }
+        }
+
+        @Override
+        public void onStrongAuthStateChanged(int userId) {
+            super.onStrongAuthStateChanged(userId);
+        }
+
+        @Override
+        public void onFingerprintAuthenticated(int userId) {
+            super.onFingerprintAuthenticated(userId);
+            mInsideCircle = false;
+        }
+    };
+
     FacolaView(Context context) {
         super(context);
 
@@ -139,12 +221,12 @@ public class FacolaView extends ImageView implements OnTouchListener {
         invalidate();
 
         if (!mInsideCircle) {
-            mParams.dimAmount = UNTOUCHED_DIM;
+            mParams.dimAmount = mIsDreaming ? UNTOUCHED_DOZE_DIM : UNTOUCHED_DIM;
             // Changing Dim is instant, changing brightness isn't.
             // Have a little pity of users' eyes and wait a bit
             mMainHandler.postDelayed(() -> {
                 if (visible) {
-                    mParams.screenBrightness = .0f;
+                    //mParams.screenBrightness = .0f;
                     mWM.updateViewLayout(this, mParams);
                 }
             }, 100);
@@ -153,13 +235,18 @@ public class FacolaView extends ImageView implements OnTouchListener {
         }
 
         mParams.dimAmount = TOUCHED_DIM;
-        mParams.screenBrightness = 1.0f;
+        //mParams.screenBrightness = 1.0f;
         mWM.updateViewLayout(this, mParams);
 
         return true;
     }
 
     public void show() {
+        if ((!mUpdateMonitor.isUnlockWithFingerprintPossible(KeyguardUpdateMonitor.getCurrentUser()) ||
+            !mUpdateMonitor.isUnlockingWithFingerprintAllowed())) {
+            return;
+        }
+
         if (mX == -1 || mY == -1 || mW == -1 || mH == -1)
             return;
 
-- 
2.17.1

